# XXX For the which problem
CYGWIN = call("uname").startswith("CYGWIN")

@command
def build(app):
    with working_dir("artemis"):
        burly = read("burly.sh").strip()

        install_sh_in = read("install.sh.in")
        install_sh = replace(install_sh_in, "@burly@", burly)

        uninstall_sh_in = read("uninstall.sh.in")
        uninstall_sh = replace(uninstall_sh_in, "@burly@", burly)

        write("install.sh", install_sh)
        write("uninstall.sh", uninstall_sh)

@command
def test(app, shell="sh", verbose=False, debug=False):
    if not CYGWIN:
        check_program(shell)

    build(app)

    if debug:
        ENV["DEBUG"] = "1"

    try:
        with working_dir("artemis"):
            run(f"{shell} install.sh {'-v' if verbose else ''}".strip())
            run(f"{shell} uninstall.sh {'-v' if verbose else ''}".strip())
    finally:
        if debug:
            del ENV["DEBUG"]

@command
def big_test(app, verbose=False, debug=False):
    test(app, verbose=True, debug=debug)
    test(app, verbose=False, debug=debug)

    test(app, verbose=verbose, debug=True)
    test(app, verbose=verbose, debug=False)

    for shell in "ash", "bash", "dash", "ksh", "mksh", "yash", "zsh":
        if CYGWIN or not which(shell):
            continue

        test(app, shell=shell, verbose=verbose, debug=debug)

    with working_env():
        with working_dir("artemis"):
            run(f"sh install.sh") # No existing installation and no existing backup
            run(f"sh install.sh") # Creates a backup
            run(f"sh install.sh") # Backs up the backup

            run(f"sh uninstall.sh")

@command
def lint(app):
    check_program("shellcheck")

    build(app)

    with working_dir("artemis"):
        run("shellcheck --enable all --exclude SC3043 install.sh uninstall.sh")
