# XXX For the which problem
CYGWIN = call("uname").startswith("CYGWIN")

@command
def test(app, shell="sh", verbose=False, debug=False):
    if not CYGWIN:
        check_program(shell)

    if verbose:
        ENV["VERBOSE"] = "1"

    if debug:
        ENV["DEBUG"] = "1"

    try:
        run(f"{shell} install.sh -y")
        run(f"{shell} uninstall.sh -y")
    finally:
        if verbose:
            del ENV["VERBOSE"]

        if debug:
            del ENV["DEBUG"]

@command
def big_test(app, verbose=False, debug=False):
    test(app, verbose=True, debug=debug)
    test(app, verbose=False, debug=debug)

    test(app, verbose=verbose, debug=True)
    test(app, verbose=verbose, debug=False)

    for shell in "ash", "bash", "dash", "ksh", "zsh":
        if CYGWIN or not which(shell):
            continue

        test(app, shell=shell, verbose=verbose, debug=debug)

    with working_env():
        run(f"sh uninstall.sh -y") # No existing installation

        run(f"sh install.sh -y") # No existing installation and no existing backup
        run(f"sh install.sh -y") # Creates a backup
        run(f"sh install.sh -y") # Backs up the backup

        run(f"sh uninstall.sh -y") # No existing backup
        run(f"sh uninstall.sh -y") # Creates a backup
        run(f"sh uninstall.sh -y") # Backs up the backup

@command
def lint(app):
    check_program("shellcheck")

    run("shellcheck --enable all install.sh")

@command
def clean(app):
    remove(join(get_home_dir(), ".cache", "artemis-install-script"))
