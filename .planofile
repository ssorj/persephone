@command
def test(app, shell="sh", verbose=False, debug=False):
    # XXX Restore this when check_program works on Windows
    # check_program(shell)

    if verbose:
        ENV["VERBOSE"] = "1"

    if debug:
        ENV["DEBUG"] = "1"

    run(f"{shell} install.sh")
    run(f"{shell} uninstall.sh")

@command
def big_test(app, verbose=False, debug=False):
    test(app, verbose=verbose, debug=debug)

    if verbose:
        ENV["VERBOSE"] = "1"

    if debug:
        ENV["DEBUG"] = "1"

    for shell in "ash", "bash", "dash", "ksh", "zsh":
        # XXX This test doesn't work correctly on Windows
        if not which(shell):
            continue

        run(f"{shell} uninstall.sh") # No existing installation

        run(f"{shell} install.sh") # No existing installation and no existing backup
        run(f"{shell} install.sh") # Creates a backup
        run(f"{shell} install.sh") # Backs up the backup

        run(f"{shell} uninstall.sh") # No existing backup
        run(f"{shell} uninstall.sh") # Creates a backup
        run(f"{shell} uninstall.sh") # Backs up the backup

@command
def lint(app):
    check_program("shellcheck")

    run("shellcheck --enable all install.sh")

@command
def clean(app):
    remove(join(get_home_dir(), ".cache", "artemis-install-script"))
